name: 'CMake ready reusable action made by Lohk'
description: 'Made to build CMake projects for Linux, Windows and/or MacOS'
inputs:
  build_configuration:
    description: 'Release or Debug?'
    required: false
    default: 'Release'
  checkout:
    description: 'Should this checkout the project automagically?'
    required: false
    default: 'true'
  project_path:
    description: 'Project path to work on?'
    required: false
    default: '.'
  upload_logs:
    description: 'Upload logs?'
    required: false
    default: 'false'
  artifact_name:
    description: 'How to name this project outputs as Artifacts? (Logs will be called (this)_logs)'
    required: true
  extra_flags:
    description: 'Put more flags to cmake build? (like "--trace")'
    required: false
    default: ''
  use_vcpkg:
    description: 'Downloads, builds latest vcpkg and installs it'
    required: false
    default: 'false'
  debug_everything:
    description: 'Upload all files to check what''s going on'
    required: false
    default: 'false'
  use_mingw:
    description: 'Use MinGW?'
    required: false
    default: 'false'
  add_libraries_to_path:
    description: 'Enforce export of libraries with executable?'
    required: false
    default: 'false'
  
runs:
  using: composite
  steps:
    - name: Setup environment variables # GITHUB_ENV is only "valid" one step after being set
      working-directory: ${{ inputs.project_path }}
      id: my-vars
      shell: bash
      run: |
        echo ============================== STEP: Environment setup ==============================

        echo LOG_TXT='${{ github.workspace }}/____internal_logs.log'        >> $GITHUB_ENV
        echo MAKE_TXT='${{ github.workspace }}/____internal_exec_logs.log'  >> $GITHUB_ENV
        echo BUILD_DIR='${{ github.workspace }}/build_dir'                  >> $GITHUB_ENV
        echo OUTPUT_DIR='${{ github.workspace }}/output_dir'                >> $GITHUB_ENV

        echo LOG_TXT='${{ github.workspace }}/____internal_logs.log'        >> $GITHUB_OUTPUT
        echo MAKE_TXT='${{ github.workspace }}/____internal_exec_logs.log'  >> $GITHUB_OUTPUT
        echo OUTPUT_DIR='${{ github.workspace }}/output_dir'                >> $GITHUB_OUTPUT

        echo PROJECT_PATH=$PWD                                              >> $GITHUB_ENV
        echo ROOT_PATH='${{ github.workspace }}'                            >> $GITHUB_ENV
        echo VCPKG_ROOT='${{ github.workspace }}'/____internal_vcpkg        >> $GITHUB_ENV
        echo VCPKG_RELATIVE=____internal_vcpkg                              >> $GITHUB_ENV

        if [[ ${{ inputs.add_libraries_to_path }} == "true" ]]; then
          echo EXPORT_LIBS=1 >> $GITHUB_ENV
        fi

        if [[ "${{ inputs.use_vcpkg }}" == "true" ]]; then
          echo TOOLCHAIN_ARGUMENT=-DCMAKE_TOOLCHAIN_FILE='${{ github.workspace }}'/____internal_vcpkg/scripts/buildsystems/vcpkg.cmake >> $GITHUB_ENV
        fi

        if [[ ${{ runner.os }} == "Windows" ]]; then
            if [[ ${{ inputs.use_mingw }} == "false" ]]; then
              echo CC=cl                              >> $GITHUB_ENV
              echo CXX=cl                             >> $GITHUB_ENV
            else
              echo CC=gcc                             >> $GITHUB_ENV
              echo CXX=g++                            >> $GITHUB_ENV
              echo GG="MinGW Makefiles"               >> $GITHUB_ENV
            fi
            echo VCPKG_TRIPLET=x64-windows            >> $GITHUB_ENV
        elif [[ ${{ runner.os }} == "macOS" ]]; then
            ARCH=$(uname -m)
            if [[ "$ARCH" == "arm64" ]]; then
              echo VCPKG_TRIPLET="arm64-osx"          >> $GITHUB_ENV
            elif [[ "$ARCH" == "x86_64" ]]; then
              echo VCPKG_TRIPLET="x64-osx"            >> $GITHUB_ENV
            else
              echo "Unknown architecture: $ARCH"
              exit 1
            fi
            echo CC=clang     >> $GITHUB_ENV
            echo CXX=clang++  >> $GITHUB_ENV
        else
            echo CC=gcc                     >> $GITHUB_ENV
            echo CXX=g++                    >> $GITHUB_ENV
            echo VCPKG_TRIPLET=x64-linux    >> $GITHUB_ENV
        fi   


    - name: Put title for summary
      shell: bash
      run: |
        echo ============================== STEP: Summary set up ==============================

        echo "## 🌝 LunarisLib/actions/CMake" >> $GITHUB_STEP_SUMMARY

        echo "*This is the log output for this action:*" >> $GITHUB_STEP_SUMMARY
        echo "- Kind of build: ${{ inputs.build_configuration }}" >> $GITHUB_STEP_SUMMARY
        echo "- Project full path: $PROJECT_PATH" >> $GITHUB_STEP_SUMMARY
        echo "- Artifact name: ${{ inputs.artifact_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Running on: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- (debug) Logs at: $LOG_TXT" >> $GITHUB_STEP_SUMMARY
        echo "- (debug) CMake logs at: $MAKE_TXT" >> $GITHUB_STEP_SUMMARY
        echo "- (debug) Build dir: $BUILD_DIR" >> $GITHUB_STEP_SUMMARY
        echo "- (debug) Output dir: $OUTPUT_DIR" >> $GITHUB_STEP_SUMMARY
        echo "- (debug) Root path: $ROOT_PATH" >> $GITHUB_STEP_SUMMARY
        echo "- (debug) Vcpkg path: $VCPKG_ROOT" >> $GITHUB_STEP_SUMMARY
        echo "- (debug) Toolchain path (if vcpkg is set): $TOOLCHAIN_ARGUMENT" >> $GITHUB_STEP_SUMMARY
        echo "- (debug) CC: $CC" >> $GITHUB_STEP_SUMMARY
        echo "- (debug) CXX: $CXX" >> $GITHUB_STEP_SUMMARY
        echo "- (debug) TRIPLET: $VCPKG_TRIPLET" >> $GITHUB_STEP_SUMMARY

    - name: Checkout if requested
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@main
      with:
        submodules: 'true'
        
    - name: Setup MSVC (automatic)
      if: ${{ inputs.use_mingw == 'false' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64
      
    - name: Install VCPKG
      if: ${{ inputs.use_vcpkg == 'true' }}
      working-directory: ${{ github.workspace }} # root
      shell: bash
      run: |
        echo ============================== STEP: Install VCPKG automatically ==============================

        echo "🔶 Using VCPKG!" 2>&1 | tee $LOG_TXT -a

        if [[ -d $VCPKG_ROOT ]]; then
          echo "🔶 Found "$VCPKG_ROOT" folder. Cleaning it for self install instead!" 2>&1 | tee $LOG_TXT -a

          rm -rf $VCPKG_ROOT
        fi

        echo "🔶 Cloning vcpkg to "$VCPKG_ROOT 2>&1 | tee $LOG_TXT -a

        git clone https://github.com/microsoft/vcpkg.git $VCPKG_RELATIVE

        echo "🔶 Setting up vcpkg..."  2>&1 | tee $LOG_TXT -a

        cd $VCPKG_RELATIVE

        if [[ ${{ runner.os }} == "Windows" ]]; then
          ./bootstrap-vcpkg.bat -disableMetrics
        else
          ./bootstrap-vcpkg.sh -disableMetrics
        fi

        echo "🔶 Installing vcpkg packages..." 2>&1 | tee $LOG_TXT -a

        ./vcpkg install 2>&1 | tee $MAKE_TXT -a
        
        echo "🔶 vcpkg good!" 2>&1 | tee $LOG_TXT -a

    - name: Build Cmake manually
      shell: bash
      working-directory: ${{ inputs.project_path }}
      env:
        BUILD_TYPE: ${{ inputs.build_configuration }}
        WORK_PATH: ${{ inputs.project_path }}
      run: |
        echo ============================== STEP: Building CMake ==============================
        
        echo "🔶 Cleaning up paths "$BUILD_DIR" and "$OUTPUT_DIR 2>&1 | tee $LOG_TXT -a
        rm -rf $BUILD_DIR
        rm -rf $OUTPUT_DIR

        echo "🔶 (Re)Creating path for build "$BUILD_DIR" and "$OUTPUT_DIR 2>&1 | tee $LOG_TXT -a
        mkdir -p $BUILD_DIR
        mkdir -p $OUTPUT_DIR

        echo "🔶 Preparing CMake..." 2>&1 | tee $LOG_TXT -a

        CMAKE_ARGUMENTS=(
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE
        )

        if [[ "$EXPORT_LIBS" == "1" ]]; then
          CMAKE_ARGUMENTS+=(
            -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY=$OUTPUT_DIR
            -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=$OUTPUT_DIR
          )
        fi

        CMAKE_ARGUMENTS+=(        
          -DCMAKE_C_COMPILER=$CC
          -DCMAKE_CXX_COMPILER=$CXX
        )

        if [[ -n $VCPKG_TRIPLET ]]; then
          CMAKE_ARGUMENTS+=(
            $TOOLCHAIN_ARGUMENT
            -DVCPKG_TARGET_TRIPLET=$VCPKG_TRIPLET
          )
        fi

        CMAKE_ARGUMENTS+=(
          -S
          .
          -B
          $BUILD_DIR
        )

        if [[ -n $GG ]]; then
          CMAKE_ARGUMENTS+=(
            -G
            $GG
          )
        fi

        CMAKE_ARGUMENTS+=(
          --debug-output
        )

        cmake "${CMAKE_ARGUMENTS[@]}" 2>&1 | tee $MAKE_TXT -a
                
        echo "🔶 Running build CMake..." 2>&1 | tee $LOG_TXT -a

        if [[ ${{ runner.os }} == "Windows" && -z $GG ]]; then 
            cmake --build $BUILD_DIR --target ALL_BUILD --config $BUILD_TYPE --parallel 4 ${{ inputs.extra_flags }} -v 2>&1 | tee $MAKE_TXT -a
        else 
            cmake --build $BUILD_DIR --parallel 4 ${{ inputs.extra_flags }} -v 2>&1 | tee $MAKE_TXT -a
        fi
        
        echo "🔶 End!" 2>&1 | tee $LOG_TXT -a

        echo ============================== STEP: Upload and save ==============================

    - name: Save build
      uses: actions/upload-artifact@main
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ steps.my-vars.outputs.OUTPUT_DIR }}

    - if: ${{ inputs.upload_logs == 'true' && always() }}
      name: Save logs
      uses: actions/upload-artifact@main
      with:
        name: ${{ inputs.artifact_name }}_logs
        path: |
          ${{ steps.my-vars.outputs.LOG_TXT }}
          ${{ steps.my-vars.outputs.MAKE_TXT }}
        
    - name: Finish summary with happy ending
      if: success()
      shell: bash
      run: |
        echo "#### The run ended with no issues ;P" >> $GITHUB_STEP_SUMMARY

    - name: Log errors if no success instead
      if: failure()
      shell: bash
      run: |
        echo "### THE RUN ENDED WITH ISSUES! Check the log!" >> $GITHUB_STEP_SUMMARY
    - name: Upload everything on debug
      if: ${{ inputs.debug_everything == 'true' && always() }}
      uses: actions/upload-artifact@main
      with:
        name: ${{ inputs.artifact_name }}_full_debug_upload
        path: |
          ${{ github.workspace }}/*
          ${{ github.workspace }}/**/*
          ${{ github.workspace }}/**/**/*
          ${{ github.workspace }}/**/**/**/*
          ${{ github.workspace }}/**/**/**/**/*
          ${{ github.workspace }}/**/**/**/**/**/*
